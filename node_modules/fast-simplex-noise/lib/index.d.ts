export interface Options {
    amplitude?: number;
    frequency?: number;
    max?: number;
    min?: number;
    octaves?: number;
    persistence?: number;
    random?: () => number;
}
export default class FastSimplexNoise {
    readonly amplitude: number;
    readonly frequency: number;
    readonly octaves: number;
    readonly perm: Uint8Array;
    readonly permMod12: Uint8Array;
    readonly persistence: number;
    readonly random: () => number;
    readonly scale: (value: number) => number;
    static G2: number;
    static G3: number;
    static G4: number;
    static GRAD3D: number[][];
    static GRAD4D: number[][];
    constructor(options?: Options);
    cylindrical(circumference: number, coords: number[]): number;
    cylindrical2D(circumference: number, x: number, y: number): number;
    cylindrical3D(circumference: number, x: number, y: number, z: number): number;
    dot(gs: number[], coords: number[]): number;
    raw(coords: number[]): number;
    raw2D(x: number, y: number): number;
    raw3D(x: number, y: number, z: number): number;
    raw4D(x: number, y: number, z: number, w: number): number;
    scaled(coords: number[]): number;
    scaled2D(x: number, y: number): number;
    scaled3D(x: number, y: number, z: number): number;
    scaled4D(x: number, y: number, z: number, w: number): number;
    spherical(circumference: number, coords: number[]): number;
    spherical2D(circumference: number, x: number, y: number): number;
    spherical3D(circumference: number, x: number, y: number, z: number): number;
}
