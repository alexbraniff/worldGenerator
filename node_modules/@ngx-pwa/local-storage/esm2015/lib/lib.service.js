/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { LocalDatabase } from './databases/local-database';
import { JSONValidator } from './validation/json-validator';
import * as i0 from "@angular/core";
import * as i1 from "./databases/local-database";
import * as i2 from "./validation/json-validator";
/**
 * @record
 */
export function LSGetItemOptions() { }
function LSGetItemOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    LSGetItemOptions.prototype.schema;
}
export class LocalStorage {
    /**
     * @param {?} database
     * @param {?} jsonValidator
     */
    constructor(database, jsonValidator) {
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.getItemOptionsDefault = {
            schema: null
        };
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @param {?=} options
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key, options = this.getItemOptionsDefault) {
        return this.database.getItem(key).pipe(/* Validate data upon a json schema if requested */
        mergeMap((data) => {
            if (options.schema && data !== null) {
                let /** @type {?} */ validation = true;
                try {
                    validation = this.jsonValidator.validate(data, options.schema);
                }
                catch (/** @type {?} */ error) {
                    return throwError(error);
                }
                if (!validation) {
                    return throwError(new Error(`JSON invalid`));
                }
            }
            return of(data);
        }));
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        return this.database.setItem(key, data);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        return this.database.removeItem(key);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        return this.database.clear();
    }
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    setItemSubscribe(key, data) {
        this.setItem(key, data).subscribe(() => { }, () => { });
    }
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    removeItemSubscribe(key) {
        this.removeItem(key).subscribe(() => { }, () => { });
    }
    /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    clearSubscribe() {
        this.clear().subscribe(() => { }, () => { });
    }
}
LocalStorage.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalStorage.ctorParameters = () => [
    { type: LocalDatabase },
    { type: JSONValidator }
];
/** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(i1.LocalDatabase), i0.inject(i2.JSONValidator)); }, token: LocalStorage, providedIn: "root" });
function LocalStorage_tsickle_Closure_declarations() {
    /** @type {?} */
    LocalStorage.prototype.getItemOptionsDefault;
    /** @type {?} */
    LocalStorage.prototype.database;
    /** @type {?} */
    LocalStorage.prototype.jsonValidator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2xpYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7Ozs7Ozs7QUFTNUQsTUFBTTs7Ozs7SUFNSixZQUFzQixRQUF1QixFQUFZLGFBQTRCO1FBQS9ELGFBQVEsR0FBUixRQUFRLENBQWU7UUFBWSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtxQ0FKeEI7WUFDM0QsTUFBTSxFQUFFLElBQUk7U0FDYjtLQUV3Rjs7Ozs7Ozs7SUFPekYsT0FBTyxDQUFVLEdBQVcsRUFBRSxVQUE0QixJQUFJLENBQUMscUJBQXFCO1FBRWxGLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1FBR3ZDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBRWhCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBRXBDLHFCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUM7Z0JBRXRCLElBQUksQ0FBQztvQkFDSCxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDaEU7Z0JBQUMsS0FBSyxDQUFDLENBQUMsaUJBQUEsS0FBSyxFQUFFLENBQUM7b0JBQ2YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDMUI7Z0JBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUNoQixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7aUJBQzlDO2FBRUY7WUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBRWpCLENBQUMsQ0FBQyxDQUFDO0tBRVA7Ozs7Ozs7SUFRQSxPQUFPLENBQUMsR0FBVyxFQUFFLElBQVM7UUFFN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUV6Qzs7Ozs7O0lBT0EsVUFBVSxDQUFDLEdBQVc7UUFFckIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBRXRDOzs7OztJQU1BLEtBQUs7UUFFSixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUU5Qjs7Ozs7OztJQU9ELGdCQUFnQixDQUFDLEdBQVcsRUFBRSxJQUFTO1FBRXJDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBRyxFQUFFLEdBQUcsRUFBRSxJQUFHLENBQUMsQ0FBQztLQUV2RDs7Ozs7O0lBTUEsbUJBQW1CLENBQUMsR0FBVztRQUU5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBRyxFQUFFLEdBQUcsRUFBRSxJQUFHLENBQUMsQ0FBQztLQUVwRDs7Ozs7SUFHRCxjQUFjO1FBRVosSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBRyxFQUFFLEdBQUcsRUFBRSxJQUFHLENBQUMsQ0FBQztLQUU1Qzs7O1lBeEdGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVZRLGFBQWE7WUFFYixhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBMb2NhbERhdGFiYXNlIH0gZnJvbSAnLi9kYXRhYmFzZXMvbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYSB9IGZyb20gJy4vdmFsaWRhdGlvbi9qc29uLXNjaGVtYSc7XG5pbXBvcnQgeyBKU09OVmFsaWRhdG9yIH0gZnJvbSAnLi92YWxpZGF0aW9uL2pzb24tdmFsaWRhdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBMU0dldEl0ZW1PcHRpb25zIHtcbiAgc2NoZW1hPzogSlNPTlNjaGVtYSB8IG51bGw7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZSB7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGdldEl0ZW1PcHRpb25zRGVmYXVsdDogTFNHZXRJdGVtT3B0aW9ucyA9IHtcbiAgICBzY2hlbWE6IG51bGxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0YWJhc2U6IExvY2FsRGF0YWJhc2UsIHByb3RlY3RlZCBqc29uVmFsaWRhdG9yOiBKU09OVmFsaWRhdG9yKSB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZywgb3B0aW9uczogTFNHZXRJdGVtT3B0aW9ucyA9IHRoaXMuZ2V0SXRlbU9wdGlvbnNEZWZhdWx0KTogT2JzZXJ2YWJsZTxUIHwgbnVsbD4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuZ2V0SXRlbTxUPihrZXkpLnBpcGUoXG5cbiAgICAgIC8qIFZhbGlkYXRlIGRhdGEgdXBvbiBhIGpzb24gc2NoZW1hIGlmIHJlcXVlc3RlZCAqL1xuICAgICAgbWVyZ2VNYXAoKGRhdGEpID0+IHtcblxuICAgICAgICBpZiAob3B0aW9ucy5zY2hlbWEgJiYgZGF0YSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSB0aGlzLmpzb25WYWxpZGF0b3IudmFsaWRhdGUoZGF0YSwgb3B0aW9ucy5zY2hlbWEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoYEpTT04gaW52YWxpZGApKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvZihkYXRhKTtcblxuICAgICAgfSkpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLnNldEl0ZW0oa2V5LCBkYXRhKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UucmVtb3ZlSXRlbShrZXkpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuY2xlYXIoKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlLCBhbmQgYXV0by1zdWJzY3JpYmVzXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgVGhlIGl0ZW0ncyB2YWx1ZSwgbXVzdCBOT1QgYmUgbnVsbCBvciB1bmRlZmluZWRcbiAgICovXG4gIHNldEl0ZW1TdWJzY3JpYmUoa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuXG4gICAgdGhpcy5zZXRJdGVtKGtleSwgZGF0YSkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSwgYW5kIGF1dG8tc3Vic2NyaWJlc1xuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqL1xuICAgcmVtb3ZlSXRlbVN1YnNjcmliZShrZXk6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgdGhpcy5yZW1vdmVJdGVtKGtleSkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG4gIC8qKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2UsIGFuZCBhdXRvLXN1YnNjcmliZXMgKi9cbiAgY2xlYXJTdWJzY3JpYmUoKTogdm9pZCB7XG5cbiAgICB0aGlzLmNsZWFyKCkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG59XG4iXX0=