/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Subset of the JSON Schema.
 * Types are enforced to validate everything: each value MUST have either 'type' or 'properties' or 'items' or 'const' or 'enum'.
 * Therefore, unlike the spec, booleans are not allowed as schemas.
 * @see http://json-schema.org/latest/json-schema-validation.html
 * Not all validation features are supported: just follow the interface.
 * \@todo When TS 2.8, explore if this schemas can be split for object and arrays with conditional types.
 * @record
 */
export function JSONSchema() { }
function JSONSchema_tsickle_Closure_declarations() {
    /**
     * Type for a primitive value.
     * Not required for objects, just set 'properties'.
     * Not required for arrays, just set 'items'.
     * Not required for const and enum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.type;
    /**
     * List of properties schemas for an object.
     * @type {?|undefined}
     */
    JSONSchema.prototype.properties;
    /**
     * Array of names of the required properties for an object.
     * Properties set as required should be present in 'properties' too.
     * Note that in the last spec, booleans are not supported anymore.
     * @type {?|undefined}
     */
    JSONSchema.prototype.required;
    /**
     * Schema for the values of an array.
     * 'type' of values should be a string (not an array of type).
     * @type {?|undefined}
     */
    JSONSchema.prototype.items;
    /**
     * Checks if a value is strictly equal to this.
     * @type {?|undefined}
     */
    JSONSchema.prototype.const;
    /**
     * Checks if a value is strictly equal to one of the value of enum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.enum;
    /**
     * Minumum lenght for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maxLength;
    /**
     * Minumum lenght for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minLength;
    /**
     * Pattern to match for a string.
     * Must be a valid regular expression, WITHOUT the / delimiters.
     * @type {?|undefined}
     */
    JSONSchema.prototype.pattern;
    /**
     * Check if a number is a multiple of x.
     * Must be strictly greater than 0.
     * @type {?|undefined}
     */
    JSONSchema.prototype.multipleOf;
    /**
     * Check if a number is less or equal than this maximum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maximum;
    /**
     * Check if a number is strictly less than this maximum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.exclusiveMaximum;
    /**
     * Check if a number is greater or equal than this minimum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minimum;
    /**
     * Check if a number is strictly greater than this minimum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.exclusiveMinimum;
    /**
     * Check if an array length is less or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maxItems;
    /**
     * Check if an array length is greater or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minItems;
    /**
     * Check if an array only have unique values.
     * @type {?|undefined}
     */
    JSONSchema.prototype.uniqueItems;
    /* TODO: handle strange member:
    [k: string]: any;
    */
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3Vic2V0IG9mIHRoZSBKU09OIFNjaGVtYS5cbiAqIFR5cGVzIGFyZSBlbmZvcmNlZCB0byB2YWxpZGF0ZSBldmVyeXRoaW5nOiBlYWNoIHZhbHVlIE1VU1QgaGF2ZSBlaXRoZXIgJ3R5cGUnIG9yICdwcm9wZXJ0aWVzJyBvciAnaXRlbXMnIG9yICdjb25zdCcgb3IgJ2VudW0nLlxuICogVGhlcmVmb3JlLCB1bmxpa2UgdGhlIHNwZWMsIGJvb2xlYW5zIGFyZSBub3QgYWxsb3dlZCBhcyBzY2hlbWFzLlxuICogQHNlZSBodHRwOi8vanNvbi1zY2hlbWEub3JnL2xhdGVzdC9qc29uLXNjaGVtYS12YWxpZGF0aW9uLmh0bWxcbiAqIE5vdCBhbGwgdmFsaWRhdGlvbiBmZWF0dXJlcyBhcmUgc3VwcG9ydGVkOiBqdXN0IGZvbGxvdyB0aGUgaW50ZXJmYWNlLlxuICogQHRvZG8gV2hlbiBUUyAyLjgsIGV4cGxvcmUgaWYgdGhpcyBzY2hlbWFzIGNhbiBiZSBzcGxpdCBmb3Igb2JqZWN0IGFuZCBhcnJheXMgd2l0aCBjb25kaXRpb25hbCB0eXBlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hIHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYSBwcmltaXRpdmUgdmFsdWUuXG4gICAqIE5vdCByZXF1aXJlZCBmb3Igb2JqZWN0cywganVzdCBzZXQgJ3Byb3BlcnRpZXMnLlxuICAgKiBOb3QgcmVxdWlyZWQgZm9yIGFycmF5cywganVzdCBzZXQgJ2l0ZW1zJy5cbiAgICogTm90IHJlcXVpcmVkIGZvciBjb25zdCBhbmQgZW51bS5cbiAgICovXG4gIHR5cGU/OiAnc3RyaW5nJyB8ICdudW1iZXInIHwgJ2ludGVnZXInIHwgJ2Jvb2xlYW4nIHwgJ2FycmF5JyB8ICdvYmplY3QnIHwgJ251bGwnO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgc2NoZW1hcyBmb3IgYW4gb2JqZWN0LlxuICAgKi9cbiAgcHJvcGVydGllcz86IHtcbiAgICBbazogc3RyaW5nXTogSlNPTlNjaGVtYTtcbiAgfTtcblxuICAvKipcbiAgICogQXJyYXkgb2YgbmFtZXMgb2YgdGhlIHJlcXVpcmVkIHByb3BlcnRpZXMgZm9yIGFuIG9iamVjdC5cbiAgICogUHJvcGVydGllcyBzZXQgYXMgcmVxdWlyZWQgc2hvdWxkIGJlIHByZXNlbnQgaW4gJ3Byb3BlcnRpZXMnIHRvby5cbiAgICogTm90ZSB0aGF0IGluIHRoZSBsYXN0IHNwZWMsIGJvb2xlYW5zIGFyZSBub3Qgc3VwcG9ydGVkIGFueW1vcmUuXG4gICAqL1xuICByZXF1aXJlZD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBTY2hlbWEgZm9yIHRoZSB2YWx1ZXMgb2YgYW4gYXJyYXkuXG4gICAqICd0eXBlJyBvZiB2YWx1ZXMgc2hvdWxkIGJlIGEgc3RyaW5nIChub3QgYW4gYXJyYXkgb2YgdHlwZSkuXG4gICAqL1xuICBpdGVtcz86IEpTT05TY2hlbWEgfCBKU09OU2NoZW1hW107XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIHZhbHVlIGlzIHN0cmljdGx5IGVxdWFsIHRvIHRoaXMuXG4gICAqL1xuICBjb25zdD86IGFueTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgdmFsdWUgaXMgc3RyaWN0bHkgZXF1YWwgdG8gb25lIG9mIHRoZSB2YWx1ZSBvZiBlbnVtLlxuICAgKi9cbiAgZW51bT86IGFueVtdO1xuXG4gIC8qKlxuICAgKiBNaW51bXVtIGxlbmdodCBmb3IgYSBzdHJpbmcuXG4gICAqIE11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1heExlbmd0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogTWludW11bSBsZW5naHQgZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtaW5MZW5ndGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFBhdHRlcm4gdG8gbWF0Y2ggZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgdmFsaWQgcmVndWxhciBleHByZXNzaW9uLCBXSVRIT1VUIHRoZSAvIGRlbGltaXRlcnMuXG4gICAqL1xuICBwYXR0ZXJuPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBhIG11bHRpcGxlIG9mIHguXG4gICAqIE11c3QgYmUgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIDAuXG4gICAqL1xuICBtdWx0aXBsZU9mPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBsZXNzIG9yIGVxdWFsIHRoYW4gdGhpcyBtYXhpbXVtLlxuICAgKi9cbiAgbWF4aW11bT86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgc3RyaWN0bHkgbGVzcyB0aGFuIHRoaXMgbWF4aW11bS5cbiAgICovXG4gIGV4Y2x1c2l2ZU1heGltdW0/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdGhhbiB0aGlzIG1pbmltdW0uXG4gICAqL1xuICBtaW5pbXVtPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBzdHJpY3RseSBncmVhdGVyIHRoYW4gdGhpcyBtaW5pbXVtLlxuICAgKi9cbiAgZXhjbHVzaXZlTWluaW11bT86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXJyYXkgbGVuZ3RoIGlzIGxlc3Mgb3IgZXF1YWwgdG8gdGhpcyB2YWx1ZS5cbiAgICogTXVzdCBiZSBhIG5vbiBuZWdhdGl2ZSBpbnRlZ2VyLlxuICAgKi9cbiAgbWF4SXRlbXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGFycmF5IGxlbmd0aCBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIHRoaXMgdmFsdWUuXG4gICAqIE11c3QgYmUgYSBub24gbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1pbkl0ZW1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhcnJheSBvbmx5IGhhdmUgdW5pcXVlIHZhbHVlcy5cbiAgICovXG4gIHVuaXF1ZUl0ZW1zPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWxsb3cgb3RoZXIgcHJvcGVydGllcywgdG8gbm90IGZhaWwgd2l0aCBleGlzdGluZyBKU09OIHNjaGVtYXMuXG4gICAqL1xuICBbazogc3RyaW5nXTogYW55O1xuXG59XG4iXX0=