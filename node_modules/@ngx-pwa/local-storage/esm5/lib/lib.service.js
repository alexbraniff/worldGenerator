/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { LocalDatabase } from './databases/local-database';
import { JSONValidator } from './validation/json-validator';
import * as i0 from "@angular/core";
import * as i1 from "./databases/local-database";
import * as i2 from "./validation/json-validator";
/**
 * @record
 */
export function LSGetItemOptions() { }
function LSGetItemOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    LSGetItemOptions.prototype.schema;
}
var LocalStorage = /** @class */ (function () {
    function LocalStorage(database, jsonValidator) {
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.getItemOptionsDefault = {
            schema: null
        };
    }
    /**
     * Gets an item value in local storage
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @param {?=} options
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    LocalStorage.prototype.getItem = /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @param {?=} options
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    function (key, options) {
        var _this = this;
        if (options === void 0) { options = this.getItemOptionsDefault; }
        return this.database.getItem(key).pipe(/* Validate data upon a json schema if requested */
        mergeMap(function (data) {
            if (options.schema && data !== null) {
                var /** @type {?} */ validation = true;
                try {
                    validation = _this.jsonValidator.validate(data, options.schema);
                }
                catch (/** @type {?} */ error) {
                    return throwError(error);
                }
                if (!validation) {
                    return throwError(new Error("JSON invalid"));
                }
            }
            return of(data);
        }));
    };
    /**
     * Sets an item in local storage
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.setItem = /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key, data) {
        return this.database.setItem(key, data);
    };
    /**
     * Deletes an item in local storage
     * @param key The item's key
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.removeItem = /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key) {
        return this.database.removeItem(key);
    };
    /**
     * Deletes all items from local storage
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.clear = /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function () {
        return this.database.clear();
    };
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     */
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    LocalStorage.prototype.setItemSubscribe = /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    function (key, data) {
        this.setItem(key, data).subscribe(function () { }, function () { });
    };
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param key The item's key
     */
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    LocalStorage.prototype.removeItemSubscribe = /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    function (key) {
        this.removeItem(key).subscribe(function () { }, function () { });
    };
    /** Deletes all items from local storage, and auto-subscribes */
    /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    LocalStorage.prototype.clearSubscribe = /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    function () {
        this.clear().subscribe(function () { }, function () { });
    };
    LocalStorage.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocalStorage.ctorParameters = function () { return [
        { type: LocalDatabase },
        { type: JSONValidator }
    ]; };
    /** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(i1.LocalDatabase), i0.inject(i2.JSONValidator)); }, token: LocalStorage, providedIn: "root" });
    return LocalStorage;
}());
export { LocalStorage };
function LocalStorage_tsickle_Closure_declarations() {
    /** @type {?} */
    LocalStorage.prototype.getItemOptionsDefault;
    /** @type {?} */
    LocalStorage.prototype.database;
    /** @type {?} */
    LocalStorage.prototype.jsonValidator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2xpYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7Ozs7Ozs7O0lBZTFELHNCQUFzQixRQUF1QixFQUFZLGFBQTRCO1FBQS9ELGFBQVEsR0FBUixRQUFRLENBQWU7UUFBWSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtxQ0FKeEI7WUFDM0QsTUFBTSxFQUFFLElBQUk7U0FDYjtLQUV3RjtJQUV6Rjs7OztPQUlHOzs7Ozs7OztJQUNILDhCQUFPOzs7Ozs7O0lBQVAsVUFBaUIsR0FBVyxFQUFFLE9BQXNEO1FBQXBGLGlCQTJCQztRQTNCNkIsd0JBQUEsRUFBQSxVQUE0QixJQUFJLENBQUMscUJBQXFCO1FBRWxGLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1FBR3ZDLFFBQVEsQ0FBQyxVQUFDLElBQUk7WUFFWixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUVwQyxxQkFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUV0QixJQUFJLENBQUM7b0JBQ0gsVUFBVSxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2hFO2dCQUFDLEtBQUssQ0FBQyxDQUFDLGlCQUFBLEtBQUssRUFBRSxDQUFDO29CQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzFCO2dCQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDaEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2lCQUM5QzthQUVGO1lBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUVqQixDQUFDLENBQUMsQ0FBQztLQUVQO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDRiw4QkFBTzs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsSUFBUztRQUU3QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBRXpDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0YsaUNBQVU7Ozs7O0lBQVYsVUFBVyxHQUFXO1FBRXJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUV0QztJQUVEOzs7T0FHRzs7Ozs7SUFDRiw0QkFBSzs7OztJQUFMO1FBRUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7S0FFOUI7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0gsdUNBQWdCOzs7Ozs7SUFBaEIsVUFBaUIsR0FBVyxFQUFFLElBQVM7UUFFckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLGVBQVEsRUFBRSxlQUFRLENBQUMsQ0FBQztLQUV2RDtJQUVEOzs7T0FHRzs7Ozs7O0lBQ0YsMENBQW1COzs7OztJQUFuQixVQUFvQixHQUFXO1FBRTlCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLGVBQVEsRUFBRSxlQUFRLENBQUMsQ0FBQztLQUVwRDtJQUVELGdFQUFnRTs7Ozs7SUFDaEUscUNBQWM7Ozs7SUFBZDtRQUVFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsZUFBUSxFQUFFLGVBQVEsQ0FBQyxDQUFDO0tBRTVDOztnQkF4R0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFWUSxhQUFhO2dCQUViLGFBQWE7Ozt1QkFOdEI7O1NBZWEsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vZGF0YWJhc2VzL2xvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IEpTT05TY2hlbWEgfSBmcm9tICcuL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEnO1xuaW1wb3J0IHsgSlNPTlZhbGlkYXRvciB9IGZyb20gJy4vdmFsaWRhdGlvbi9qc29uLXZhbGlkYXRvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTFNHZXRJdGVtT3B0aW9ucyB7XG4gIHNjaGVtYT86IEpTT05TY2hlbWEgfCBudWxsO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2Uge1xuXG4gIHByb3RlY3RlZCByZWFkb25seSBnZXRJdGVtT3B0aW9uc0RlZmF1bHQ6IExTR2V0SXRlbU9wdGlvbnMgPSB7XG4gICAgc2NoZW1hOiBudWxsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRhdGFiYXNlOiBMb2NhbERhdGFiYXNlLCBwcm90ZWN0ZWQganNvblZhbGlkYXRvcjogSlNPTlZhbGlkYXRvcikge31cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIHZhbHVlIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBUaGUgaXRlbSdzIHZhbHVlIGlmIHRoZSBrZXkgZXhpc3RzLCBudWxsIG90aGVyd2lzZSwgd3JhcHBlZCBpbiBhbiBSeEpTIE9ic2VydmFibGVcbiAgICovXG4gIGdldEl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcsIG9wdGlvbnM6IExTR2V0SXRlbU9wdGlvbnMgPSB0aGlzLmdldEl0ZW1PcHRpb25zRGVmYXVsdCk6IE9ic2VydmFibGU8VCB8IG51bGw+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmdldEl0ZW08VD4oa2V5KS5waXBlKFxuXG4gICAgICAvKiBWYWxpZGF0ZSBkYXRhIHVwb24gYSBqc29uIHNjaGVtYSBpZiByZXF1ZXN0ZWQgKi9cbiAgICAgIG1lcmdlTWFwKChkYXRhKSA9PiB7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2NoZW1hICYmIGRhdGEgIT09IG51bGwpIHtcblxuICAgICAgICAgIGxldCB2YWxpZGF0aW9uID0gdHJ1ZTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gdGhpcy5qc29uVmFsaWRhdG9yLnZhbGlkYXRlKGRhdGEsIG9wdGlvbnMuc2NoZW1hKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsaWRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IobmV3IEVycm9yKGBKU09OIGludmFsaWRgKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2YoZGF0YSk7XG5cbiAgICAgIH0pKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgVGhlIGl0ZW0ncyB2YWx1ZSwgbXVzdCBOT1QgYmUgbnVsbCBvciB1bmRlZmluZWRcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogYW55KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5zZXRJdGVtKGtleSwgZGF0YSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLnJlbW92ZUl0ZW0oa2V5KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmNsZWFyKCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSwgYW5kIGF1dG8tc3Vic2NyaWJlc1xuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqL1xuICBzZXRJdGVtU3Vic2NyaWJlKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcblxuICAgIHRoaXMuc2V0SXRlbShrZXksIGRhdGEpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2UsIGFuZCBhdXRvLXN1YnNjcmliZXNcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKi9cbiAgIHJlbW92ZUl0ZW1TdWJzY3JpYmUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIHRoaXMucmVtb3ZlSXRlbShrZXkpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxuICAvKiogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlLCBhbmQgYXV0by1zdWJzY3JpYmVzICovXG4gIGNsZWFyU3Vic2NyaWJlKCk6IHZvaWQge1xuXG4gICAgdGhpcy5jbGVhcigpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxufVxuIl19