{"version":3,"file":"ngx-pwa-local-storage.js.map","sources":["ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/mock-local-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/lib.service.ts"],"sourcesContent":["import { InjectionToken, Provider } from '@angular/core';\n\nexport const LOCAL_STORAGE_PREFIX = new InjectionToken<string>('localStoragePrefix', { providedIn: 'root', factory: () => '' });\n\nexport interface LocalStorageProvidersConfig {\n\n  /** Optional prefix to avoid collision in multiple apps on same subdomain */\n  prefix?: string;\n}\n\nexport function localStorageProviders(config: LocalStorageProvidersConfig): Provider[] {\n  return [\n    config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []\n  ];\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected prefix = '';\n\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected userPrefix: string | null = null) {\n\n    if (userPrefix) {\n      this.prefix = `${userPrefix}_`;\n    }\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = localStorage.getItem(`${this.prefix}${key}`);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return throwError(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return of(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(data));\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    localStorage.removeItem(`${this.prefix}${key}`);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n  /**\n   * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),\n   * so a fallback can be needed.\n   */\n  protected fallback: LocalDatabase | null = null;\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected prefix: string | null = null) {\n\n    if (prefix) {\n\n      this.dbName = `${prefix}_${this.dbName}`;\n\n    }\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect(prefix);\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<TÂ | null> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.getItem<T>(key);\n    }\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.transaction().pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `getter`)) as Observable<T | null>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.setItem(key, data);\n    }\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return of(true);\n\n    }\n\n    /* Opening a transaction and checking if the item already exists in local storage */\n    return this.getItem(key).pipe(\n      map((existingData) => (existingData == null) ? 'add' : 'put'),\n      mergeMap((method) => {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          let request: IDBRequest;\n\n          /* Adding or updating local storage, based on previous checking */\n          switch (method) {\n            case 'add':\n              request = transaction.add({ [this.dataPath]: data }, key);\n              break;\n            case 'put':\n            default:\n              request = transaction.put({ [this.dataPath]: data }, key);\n              break;\n          }\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.removeItem(key);\n    }\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(\n      mergeMap((data) => {\n\n        /* If the item exists in local storage */\n        if (data != null) {\n\n          /* Opening a transaction */\n          return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n            /* Deleting the item in local storage */\n            const request = transaction.delete(key);\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)) as Observable<boolean>)\n              .pipe(first());\n\n          }));\n\n        }\n\n        /* Passing true if the item does not exist in local storage */\n        return of(true);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.clear();\n    }\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting all items from local storage */\n        const request = transaction.clear();\n\n        /* Merging success (passing true) and error events and autoclosing the observable */\n        return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)) as Observable<boolean>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect(prefix: string | null = null): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connecting to IndexedDB */\n    try {\n\n      request = indexedDB.open(this.dbName);\n\n    }Â catch (error) {\n\n      /* Fallback storage if IndexedDb connection is failing */\n      this.setFallback(prefix);\n\n      return;\n\n    }\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (fromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = fromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (race(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, () => {\n\n        /* Fallback storage if IndexedDb connection is failing */\n        this.setFallback(prefix);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly'): Observable<IDBObjectStore> {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest): Observable<boolean> {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (fromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``): Observable<never> {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (fromEvent(request, 'error') as Observable<Event>)\n      .pipe(mergeMap(() => throwError(new Error(`IndexedDB ${error} issue : ${request.error.message}.`))));\n\n  }\n\n  protected setFallback(prefix: string | null): void {\n    this.fallback = new LocalStorageDatabase(prefix);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockLocalDatabase implements LocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string): Observable<T |Â null> {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return of((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    this.localStorage.set(key, data);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    this.localStorage.delete(key);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    this.localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID, Optional } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MockLocalDatabase } from './mock-local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\nexport function localDatabaseFactory(platformId: Object, prefix: string | null) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase(prefix);\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase(prefix);\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    [new Optional(), LOCAL_STORAGE_PREFIX]\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { JSONSchema } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema.\n   * Types are enforced to validate everything:\n   * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.\n   * Therefore, unlike the spec, booleans are not allowed as schemas.\n   * Not all validation features are supported: just follow the interface.\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    /** @todo When TS 2.8, explore if this is possible with conditional types */\n    if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)\n    && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))\n    || schema.type === 'array' || schema.type === 'object')\n    && !(schema.hasOwnProperty('properties') && schema.properties != null)  && !(schema.hasOwnProperty('items') && schema.items != null)) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateProperties(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateRequired(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  protected isObjectNotNull(value: any): boolean {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  protected validateProperties(data: { [k: string]: any; }, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('required') || (schema.required == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    for (const requiredProp of schema.required) {\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateEnum(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {\n      return true;\n    }\n\n    /** @todo Move to ES2016 .includes() ? */\n    return (schema.enum.indexOf(data) !== -1);\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('type') || (schema.type == null)) {\n      return true;\n    }\n\n    switch (schema.type) {\n\n      case 'null':\n        return data === null;\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return typeof data === 'boolean';\n      case 'object':\n        return typeof data === 'object';\n      case 'array':\n        return Array.isArray(data);\n\n    }\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('items') || (schema.items == null)) {\n      return true;\n    }\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {\n\n      if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {\n\n        throw new Error(`'maxItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {\n\n      if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {\n\n        throw new Error(`'minItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {\n\n      if (schema.uniqueItems) {\n\n        const dataSet = new Set(data);\n\n        if (data.length !== dataSet.size) {\n          return false;\n        }\n\n      }\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema): boolean {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateString(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {\n\n      if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {\n\n        throw new Error(`'maxLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {\n\n      if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {\n\n        throw new Error(`'minLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {\n\n      const regularExpression = new RegExp(schema.pattern);\n\n      if (!regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateNumber(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {\n\n      if (schema.multipleOf <= 0) {\n\n        throw new Error(`'multipleOf' must be a number strictly greater than 0.`);\n\n      }\n\n      if (!Number.isInteger(data / schema.multipleOf)) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {\n\n      if (data > schema.maximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {\n\n      if (data >= schema.exclusiveMaximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {\n\n      if (data < schema.minimum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {\n\n      if (data <= schema.exclusiveMinimum) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './databases/local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface LSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  protected readonly getItemOptionsDefault: LSGetItemOptions = {\n    schema: null\n  };\n\n  constructor(protected database: LocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: LSGetItemOptions = this.getItemOptionsDefault): Observable<T | null> {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (options.schema && data !== null) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return throwError(error);\n          }\n\n          if (!validation) {\n            return throwError(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return of(data);\n\n      }));\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    return this.database.clear();\n\n  }\n\n  /**\n   * Sets an item in local storage, and auto-subscribes\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   */\n  setItemSubscribe(key: string, data: any): void {\n\n    this.setItem(key, data).subscribe(() => {}, () => {});\n\n  }\n\n  /**\n   * Deletes an item in local storage, and auto-subscribes\n   * @param key The item's key\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe(() => {}, () => {});\n\n  }\n\n  /** Deletes all items from local storage, and auto-subscribes */\n  clearSubscribe(): void {\n\n    this.clear().subscribe(() => {}, () => {});\n\n  }\n\n}\n"],"names":["tslib_1.__values"],"mappings":";;;;;;;;;;AAAA,qBAEa,oBAAoB,GAAG,IAAI,cAAc,CAAS,oBAAoB,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,cAAM,OAAA,EAAE,GAAA,EAAE,CAAC,CAAC;;;;;AAQhI,+BAAsC,MAAmC;IACvE,OAAO;QACL,MAAM,CAAC,MAAM,GAAG,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE;KAChF,CAAC;CACH;;;;;;ACdD;IAcE,8BAAgE,UAAgC;sDAAA;QAAhC,eAAU,GAAV,UAAU,CAAsB;;sBAF7E,EAAE;QAInB,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,MAAM,GAAM,UAAU,MAAG,CAAC;SAChC;KAEF;;;;;;;;;;;;IAOD,sCAAO;;;;;;IAAP,UAAiB,GAAW;QAE1B,qBAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,KAAG,IAAI,CAAC,MAAM,GAAG,GAAK,CAAC,CAAC;QAClE,qBAAI,UAAU,GAAa,IAAI,CAAC;QAEhC,IAAI,YAAY,IAAI,IAAI,EAAE;YAExB,IAAI;gBACF,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;aACvC;YAAC,wBAAO,KAAK,EAAE;gBACd,OAAO,UAAU,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;aAC/D;SAEF;QAED,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;KAEvB;;;;;;;;;;;;;IAQD,sCAAO;;;;;;IAAP,UAAQ,GAAW,EAAE,IAAS;QAE5B,YAAY,CAAC,OAAO,CAAC,KAAG,IAAI,CAAC,MAAM,GAAG,GAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAEnE,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;;;;;;;;;;IAOD,yCAAU;;;;;IAAV,UAAW,GAAW;QAEpB,YAAY,CAAC,UAAU,CAAC,KAAG,IAAI,CAAC,MAAM,GAAG,GAAK,CAAC,CAAC;QAEhD,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;;;;;;;;IAMD,oCAAK;;;;IAAL;QAEE,YAAY,CAAC,KAAK,EAAE,CAAC;QAErB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;gBA7EF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gDAMc,QAAQ,YAAI,MAAM,SAAC,oBAAoB;;;+BAdtD;;;;;;;ACAA;;;;IA2CE,2BAAgE,MAA4B;8CAAA;QAA5B,WAAM,GAAN,MAAM,CAAsB;;;;sBA3BzE,WAAW;;;;+BAIO,cAAc;;;;uBAItB,KAAK;;;;wBAIJ,OAAO;;;;;wBAUM,IAAI;QAO7C,IAAI,MAAM,EAAE;YAEV,IAAI,CAAC,MAAM,GAAM,MAAM,SAAI,IAAI,CAAC,MAAQ,CAAC;SAE1C;;QAGD,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAe,CAAC;;QAGjD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAEtB;;;;;;;;;;;;IAOD,mCAAO;;;;;;IAAP,UAAiB,GAAW;QAA5B,iBA0BC;;QAvBC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAI,GAAG,CAAC,CAAC;SACtC;;QAGD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAC5B,GAAG,CAAC,UAAC,WAAW,IAAK,OAAA,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,GAAA,CAAC,EAC1C,QAAQ,CAAC,UAAC,OAAO;;YAGf,qBAAM,OAAO,GAAG,mBAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAsB,GAAE,IAAI,CACvE,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,mBAAC,KAAK,CAAC,MAAoB,GAAE,MAAM,GAAA,CAAC,EACnD,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,KAAK,KAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,sBAAI,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAM,KAAI,IAAI,GAAA,CAAC,CAC3F,CAAC;;YAGF,OAAO,mBAAC,IAAI,CAAC,OAAO,EAAE,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAyB;iBACrF,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAElB,CAAC,EACF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;;;;;;;;IAQD,mCAAO;;;;;;IAAP,UAAQ,GAAW,EAAE,IAAS;QAA9B,iBA6CC;;QA1CC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACzC;;QAGD,IAAI,IAAI,IAAI,IAAI,EAAE;YAEhB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SAEjB;;QAGD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAC3B,GAAG,CAAC,UAAC,YAAY,IAAK,OAAA,CAAC,YAAY,IAAI,IAAI,IAAI,KAAK,GAAG,KAAK,GAAA,CAAC,EAC7D,QAAQ,CAAC,UAAC,MAAM;;YAGd,OAAO,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,WAAW;gBAE7D,qBAAI,OAAmB,CAAC;;gBAGxB,QAAQ,MAAM;oBACZ,KAAK,KAAK;wBACR,OAAO,GAAG,WAAW,CAAC,GAAG,WAAG,GAAC,KAAI,CAAC,QAAQ,IAAG,IAAI,OAAI,GAAG,CAAC,CAAC;wBAC1D,MAAM;oBACR,KAAK,KAAK,CAAC;oBACX;wBACE,OAAO,GAAG,WAAW,CAAC,GAAG,WAAG,GAAC,KAAI,CAAC,QAAQ,IAAG,IAAI,OAAI,GAAG,CAAC,CAAC;wBAC1D,MAAM;iBACT;;gBAGD,OAAO,mBAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAwB;qBAC9G,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;aAElB,CAAC,CAAC,CAAC;SAEL,CAAC,EACF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;;;;;;IAOD,sCAAU;;;;;IAAV,UAAW,GAAW;QAAtB,iBAmCC;;QAhCC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACtC;;QAGD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAC3B,QAAQ,CAAC,UAAC,IAAI;;YAGZ,IAAI,IAAI,IAAI,IAAI,EAAE;;gBAGhB,OAAO,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,WAAW;;oBAG7D,qBAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;;oBAGxC,OAAO,mBAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAwB;yBAC/G,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAElB,CAAC,CAAC,CAAC;aAEL;;YAGD,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SAEjB,CAAC,EACF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;;;;IAMD,iCAAK;;;;IAAL;QAAA,iBAsBC;;QAnBC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;SAC9B;;QAGD,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CACvC,QAAQ,CAAC,UAAC,WAAW;;YAGnB,qBAAM,OAAO,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;;YAGpC,OAAO,mBAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAwB;iBAC/G,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAElB,CAAC,EACF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;;;;IAKS,mCAAO;;;;;IAAjB,UAAkB,MAA4B;QAA9C,iBAsDC;QAtDiB,uBAAA,EAAA,aAA4B;QAE5C,qBAAI,OAAyB,CAAC;;QAG9B,IAAI;YAEF,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAEvC;QAAC,wBAAO,KAAK,EAAE;;YAGd,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAEzB,OAAO;SAER;;QAGD,mBAAC,SAAS,CAAC,OAAO,EAAE,eAAe,CAAsB;aACtD,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CAAC,UAAC,KAAK;;YAGf,qBAAM,QAAQ,qBAAG,mBAAC,KAAK,CAAC,MAAoB,GAAE,MAAqB,CAAA,CAAC;;YAGpE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAI,CAAC,eAAe,CAAC,EAAE;;gBAG7D,QAAQ,CAAC,iBAAiB,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC;aAElD;SAEF,CAAC,CAAC;;QAGL,qBAAM,OAAO,qBAAG,SAAS,CAAC,OAAO,EAAE,SAAS,CAAsB,CAAA,CAAC;;QAGnE,mBAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAsB;aAC/E,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CAAC,UAAC,KAAK;;;YAGf,KAAI,CAAC,QAAQ,CAAC,IAAI,mBAAC,mBAAC,KAAK,CAAC,MAAoB,GAAE,MAAqB,EAAC,CAAC;SAExE,EAAE;;;YAGD,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAE1B,CAAC,CAAC;KAEN;;;;;;;;;;;IAOS,uCAAW;;;;;IAArB,UAAsB,IAA2C;QAAjE,iBAMC;QANqB,qBAAA,EAAA,iBAA2C;;QAG/D,OAAO,IAAI,CAAC,QAAQ;aACjB,IAAI,CAAC,GAAG,CAAC,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC,WAAW,CAAC,KAAI,CAAC,eAAe,CAAC,GAAA,CAAC,CAAC,CAAC;KAElH;;;;;;;;;;;IAOS,+CAAmB;;;;;IAA7B,UAA8B,OAAmB;;QAG/C,OAAO,mBAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAsB;aACvD,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,IAAI,GAAA,CAAC,CAAC,CAAC;KAE1B;;;;;;;;;;;;;IAQS,6CAAiB;;;;;;IAA3B,UAA4B,OAAmB,EAAE,KAAU;QAAV,sBAAA,EAAA,UAAU;;QAGzD,OAAO,mBAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAsB;aACrD,IAAI,CAAC,QAAQ,CAAC,cAAM,OAAA,UAAU,CAAC,IAAI,KAAK,CAAC,eAAa,KAAK,iBAAY,OAAO,CAAC,KAAK,CAAC,OAAO,MAAG,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;KAExG;;;;;IAES,uCAAW;;;;IAArB,UAAsB,MAAqB;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CAAC,MAAM,CAAC,CAAC;KAClD;;gBApTF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gDAiCc,QAAQ,YAAI,MAAM,SAAC,oBAAoB;;;4BA3CtD;;;;;;;ACAA;;4BAU2B,IAAI,GAAG,EAAe;;;;;;;;;;;;;IAO9C,mCAAO;;;;;;IAAP,UAAiB,GAAW;QAE3B,qBAAM,OAAO,GAAa,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAErD,OAAO,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC;KAErD;;;;;;;;;;;;;IAQA,mCAAO;;;;;;IAAP,UAAQ,GAAW,EAAE,IAAS;QAE7B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEjC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;;;;;;;;;;IAOA,sCAAU;;;;;IAAV,UAAW,GAAW;QAErB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE9B,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;;;;;;;;IAMA,iCAAK;;;;IAAL;QAEC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAE1B,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAEjB;;gBAzDF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;4BAPD;;;;;;;ACAA;;;;;AASA,8BAAqC,UAAkB,EAAE,MAAqB;IAE5E,IAAI,iBAAiB,CAAC,UAAU,CAAC,KAAK,WAAW,IAAI,MAAM,CAAC,KAAK,SAAS,KAAK,SAAS,CAAC,KAAK,SAAS,KAAK,IAAI,CAAC,EAAE;;QAGjH,OAAO,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAEtC;SAAM,IAAI,iBAAiB,CAAC,UAAU,CAAC,KAAK,cAAc,IAAI,MAAM,CAAC,KAAK,YAAY,KAAK,SAAS,CAAC,KAAK,YAAY,KAAK,IAAI,CAAC,EAAE;;QAGjI,OAAO,IAAI,oBAAoB,CAAC,MAAM,CAAC,CAAC;KAEzC;SAAM;;QAGL,OAAO,IAAI,iBAAiB,EAAE,CAAC;KAEhC;CAEF;;;;;;;;gBAEA,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;oBAClB,UAAU,EAAE,oBAAoB;oBAChC,IAAI,EAAE;wBACJ,WAAW;wBACX,CAAC,IAAI,QAAQ,EAAE,EAAE,oBAAoB,CAAC;qBACvC;iBACF;;;wBArCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICqBE,gCAAQ;;;;;;;;;;IAAR,UAAS,IAAS,EAAE,MAAkB;;QAGpC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC;eAClE,EAAE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;eAClH,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ;eACnD,EAAE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,IAAK,EAAE,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE;YAEpI,MAAM,IAAI,KAAK,CAAC,yGAAyG,CAAC,CAAC;SAE5H;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,KAAK,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE;YAC3F,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KAEb;;;;;IAES,uCAAe;;;;IAAzB,UAA0B,KAAU;QAElC,OAAO,CAAC,KAAK,KAAK,IAAI,MAAM,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC;KAExD;;;;;;IAES,0CAAkB;;;;;IAA5B,UAA6B,IAA2B,EAAE,MAAkB;QAE1E,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,EAAE;YACvE,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAE/B,OAAO,KAAK,CAAC;SAEd;;;;;QAMD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;YAEtE,OAAO,KAAK,CAAC;SAEd;;QAGD,KAAK,qBAAM,QAAQ,IAAI,MAAM,CAAC,UAAU,EAAE;YAExC,IAAI,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAE/E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE;oBAE/D,OAAO,KAAK,CAAC;iBAEd;aAEF;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;IAES,wCAAgB;;;;;IAA1B,UAA2B,IAAQ,EAAE,MAAkB;QAErD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE;YACnE,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAE/B,OAAO,KAAK,CAAC;SAEd;;YAED,KAA2B,IAAA,KAAAA,SAAA,MAAM,CAAC,QAAQ,CAAA,gBAAA;gBAArC,IAAM,YAAY,WAAA;;gBAGrB,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;oBAEzE,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;iBAEjF;;gBAGD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;oBAEtC,OAAO,KAAK,CAAC;iBAEd;aAEF;;;;;;;;;QAED,OAAO,IAAI,CAAC;;KAEb;;;;;;IAES,oCAAY;;;;;IAAtB,UAAuB,IAAS,EAAE,MAAkB;QAElD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;YAC3D,OAAO,IAAI,CAAC;SACb;;QAGD,QAAQ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;KAE3C;;;;;;IAES,oCAAY;;;;;IAAtB,UAAuB,IAAS,EAAE,MAAkB;QAElD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;YAC3D,OAAO,IAAI,CAAC;SACb;QAED,QAAQ,MAAM,CAAC,IAAI;YAEjB,KAAK,MAAM;gBACT,OAAO,IAAI,KAAK,IAAI,CAAC;YACvB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACZ,OAAO,OAAO,IAAI,KAAK,SAAS,CAAC;YACnC,KAAK,QAAQ;gBACX,OAAO,OAAO,IAAI,KAAK,QAAQ,CAAC;YAClC,KAAK,OAAO;gBACV,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAE9B;KAEF;;;;;;IAES,qCAAa;;;;;IAAvB,UAAwB,IAAW,EAAE,MAAkB;QAErD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE;YAC7D,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAExB,OAAO,KAAK,CAAC;SAEd;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE;YAElE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAE7D,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAE/D;YAED,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE;gBACjC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE;YAElE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAE7D,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAE/D;YAED,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE;gBACjC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,MAAM,CAAC,WAAW,IAAI,IAAI,CAAC,EAAE;YAExE,IAAI,MAAM,CAAC,WAAW,EAAE;gBAEtB,qBAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;gBAE9B,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;oBAChC,OAAO,KAAK,CAAC;iBACd;aAEF;SAEF;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAE/B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAE7C;;YAED,KAAoB,IAAA,SAAAA,SAAA,IAAI,CAAA,0BAAA;gBAAnB,IAAM,KAAK,iBAAA;gBAEd,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;oBACvC,OAAO,KAAK,CAAC;iBACd;aAEF;;;;;;;;;QAED,OAAO,IAAI,CAAC;;KAEb;;;;;;IAES,yCAAiB;;;;;IAA3B,UAA4B,IAAS,EAAE,MAAkB;QAEvD,qBAAM,KAAK,qBAAG,MAAM,CAAC,KAAqB,CAAA,CAAC;QAE3C,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;YAEhC,OAAO,KAAK,CAAC;SAEd;QAED,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAExC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;IAES,sCAAc;;;;;IAAxB,UAAyB,IAAS,EAAE,MAAkB;QAEpD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE;YAEpE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,SAAS,GAAG,CAAC,EAAE;gBAE/D,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAEhE;YAED,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE;YAEpE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,SAAS,GAAG,CAAC,EAAE;gBAE/D,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAEhE;YAED,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE;YAEhE,qBAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAErD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACjC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;IAES,sCAAc;;;;;IAAxB,UAAyB,IAAS,EAAE,MAAkB;QAEpD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC;SACd;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,EAAE;YAEtE,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,EAAE;gBAE1B,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;aAE3E;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,EAAE;gBAC/C,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE;YAEhE,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE;gBACzB,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,EAAE;YAElF,IAAI,IAAI,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBACnC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE;YAEhE,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE;gBACzB,OAAO,KAAK,CAAC;aACd;SAEF;QAED,IAAI,MAAM,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,EAAE;YAElF,IAAI,IAAI,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBACnC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;gBArXF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;wBARD;;;;;;;ACAA;IAqBE,sBAAsB,QAAuB,EAAY,aAA4B;QAA/D,aAAQ,GAAR,QAAQ,CAAe;QAAY,kBAAa,GAAb,aAAa,CAAe;qCAJxB;YAC3D,MAAM,EAAE,IAAI;SACb;KAEwF;;;;;;;;;;;;;IAOzF,8BAAO;;;;;;;IAAP,UAAiB,GAAW,EAAE,OAAsD;QAApF,iBA2BC;QA3B6B,wBAAA,EAAA,UAA4B,IAAI,CAAC,qBAAqB;QAElF,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAI,GAAG,CAAC,CAAC,IAAI;QAGvC,QAAQ,CAAC,UAAC,IAAI;YAEZ,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE;gBAEnC,qBAAI,UAAU,GAAG,IAAI,CAAC;gBAEtB,IAAI;oBACF,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;iBAChE;gBAAC,wBAAO,KAAK,EAAE;oBACd,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;iBAC1B;gBAED,IAAI,CAAC,UAAU,EAAE;oBACf,OAAO,UAAU,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC9C;aAEF;YAED,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SAEjB,CAAC,CAAC,CAAC;KAEP;;;;;;;;;;;;;IAQA,8BAAO;;;;;;IAAP,UAAQ,GAAW,EAAE,IAAS;QAE7B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KAEzC;;;;;;;;;;;IAOA,iCAAU;;;;;IAAV,UAAW,GAAW;QAErB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;KAEtC;;;;;;;;;IAMA,4BAAK;;;;IAAL;QAEC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;KAE9B;;;;;;;;;;;;IAOD,uCAAgB;;;;;;IAAhB,UAAiB,GAAW,EAAE,IAAS;QAErC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,eAAQ,EAAE,eAAQ,CAAC,CAAC;KAEvD;;;;;;;;;;IAMA,0CAAmB;;;;;IAAnB,UAAoB,GAAW;QAE9B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,eAAQ,EAAE,eAAQ,CAAC,CAAC;KAEpD;;;;;;IAGD,qCAAc;;;;IAAd;QAEE,IAAI,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,eAAQ,EAAE,eAAQ,CAAC,CAAC;KAE5C;;gBAxGF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAVQ,aAAa;gBAEb,aAAa;;;uBANtB;;;;;;;;;;;;;;;"}
